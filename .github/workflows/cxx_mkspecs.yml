name: C++ make-specs
on:
  workflow_dispatch:
    inputs:
      extra_resolve_options:
        description: "Extra Resolve Options"
        required: false
  schedule:
    - cron: "0 1 * * *" # 3 AM CET
  push:
  pull_request:
env:
  EXTRA_RESOLVE_OPTIONS: ${{ github.event.inputs.resolve_options }}
jobs:
  docker_builds:
    strategy:
      fail-fast: false
      matrix:
        config:
          - container: ghcr.io/steinwurf/gcc-11.2.0
            cxx_mkspec: --cxx_mkspec=cxx_gxx112_x64
            name: GCC 11.2
          - container: ghcr.io/steinwurf/gcc-6.3.0
            cxx_mkspec: --cxx_mkspec=cxx_gxx63_x64
            name: GCC 6.3
          - container: ghcr.io/steinwurf/clang-3.9
            name: Clang 3.9
            cxx_mkspec: --cxx_mkspec=cxx_clang39_x64
          - container: ghcr.io/steinwurf/clang-13
            name: Clang 13
            cxx_mkspec: --cxx_mkspec=cxx_clang130_x64
          - container: ghcr.io/steinwurf/clang-13
            cxx_mkspec: --cxx_mkspec=cxx_clang13_address_sanitizer_x64
            name: Clang 13 Address Sanitizer
          # TODO: Re-able this when we have fixed memory issue in google-test
          # - container: ghcr.io/steinwurf/clang13
          #   cxx_mkspec: --cxx_mkspec=cxx_clang13_memory_sanitizer_x64
          #   name: Clang 13 Memory Sanitizer
          - container: ghcr.io/steinwurf/clang-13
            cxx_mkspec: --cxx_mkspec=cxx_clang13_thread_sanitizer_x64
            name: Clang 13 Thread Sanitizer
    runs-on: [self-hosted, docker, builder]
    name: ${{ matrix.config.name }}
    container:
      image: ${{ matrix.config.container }}
      options: --user 0:0
      volumes:
        - /home/buildbot/.ssh:/root/.ssh
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Waf Configure
        run: python3 waf configure --git_protocol=git@ ${{ matrix.config.cxx_mkspec }} -v --waf-tools_checkout="add-newer-compiler-versions" $EXTRA_RESOLVE_OPTIONS
      - name: Waf Build
        run: |
          echo "::add-matcher::.github/gcc-problem-matcher.json"
          python3 waf
      - name: Waf Test
        run: python3 waf --run_tests --run_cmd="%s --no_fail"

  cross-compile-raspberry-pi:
    strategy:
      fail-fast: false
    runs-on: [self-hosted, docker, builder]
    name: Raspberry Pi 3 Build
    container:
      image: ghcr.io/steinwurf/gcc-8.3.0-raspberrypi-armv7:1.0.0
      options: --user 0:0
      volumes:
        - /home/buildbot/.ssh:/root/.ssh
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Waf Configure
        run: CXX=arm-linux-gnueabihf-g++ LD=$CXX python3 waf configure --git_protocol=git@ ${{ matrix.config.cxx_mkspec }} $EXTRA_RESOLVE_OPTIONS
      - name: Waf Build
        run: |
          echo "::add-matcher::.github/gcc-problem-matcher.json"
          python3 waf
      - name: Upload cpuid_tests Artifact
        uses: actions/upload-artifact@v2
        with:
          name: raspberry_cpuid_tests
          path: |
            build/linux/test
            !build/linux/test/**/**.*
          retention-days: 1

  # Build performed on runner using make specs
  cxx_mkspec:
    strategy:
      fail-fast: false
      matrix:
        config:
          - cxx_mkspec: cxx_msvc16_x86
            name: MSVC 16 32-bit
          - cxx_mkspec: cxx_msvc16_x64
            name: MSVC 16 64-bit
          - cxx_mkspec: cxx_apple_llvm120_x64
            name: Apple LLVM 12.0 64-bit
    runs-on: [self-hosted, "${{ matrix.config.cxx_mkspec }}", builder]
    name: ${{ matrix.config.name }}
    env:
      python: python3
    steps:
      - name: Rename python3 to python on Windows
        if: runner.os == 'Windows'
        run: echo "python=python" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure
        env:
          GIT_SSH_COMMAND: "${{ runner.os != 'Linux' && 'ssh' || 'ssh -i /home/buildbot/.ssh/id_ed25519 -o IdentitiesOnly=yes' }}"
        run: ${{ env.python }} waf configure --git_protocol=git@ --cxx_mkspec=${{ matrix.config.cxx_mkspec }} $EXTRA_RESOLVE_OPTIONS
      - name: Build
        run: |
          echo "::add-matcher::.github/gcc-problem-matcher.json"
          ${{ env.python }} waf
      - name: Test
        run: ${{ env.python }} waf --run_tests --run_cmd="%s --no_fail"
